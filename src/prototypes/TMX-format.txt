
--====The TMX Map Format Guide====--


Introduction

 Among the many things that we have had questions about, using an XML 
map format has come up the most. It isn't that using one is hard to
do, simply that it is a bit of a departure from the standard
binary-only formats most engines use.
 This document is an attempt to explain the motivations, goals, and
methods of an XML map format.


Section 1 - XML

 To understand TMX/TSX and related information, a simple 
understanding of XML is necessary. If you believe you already possess
this knowledge, then you may safely skip to Chapter 2: TMX Structure.
References for good sources of XML related material can be found in
the appendix of this document.
 XML was meant to be an answer to the various markup languages that
had already been standardized and in heavy use. The problem that arose
for many of these languages is that as new functionality was required
or proposed, new tags had to be added to the standard. Different 
vendors often added implementation-specific tags that fell outside of
the specification, and eventually the language came to have a large
and complex lexicon.
 As a result, the W3C designed XML to be free of predefined tags and
structures. Like any markup language, XML has tags, but unlike others,
no tags are predefined. Any tag that the implementor wishs to use to 
describe a data element could be defined in the Document Type 
Definition, or DTD of the implementation-specific XML document. This 
allowed that any previously standardized markup language could be 
recreated very easily in XML. More importantly, it opened the door for 
the free exchange of data between disparate, directly incompatible 
systems - provided they both understood the DTD for the XML document.
 At the endpoints of the data exchange, the data would usually be 
converted to a native format of some kind. Enter the Extensible 
Stylesheet Language, or XSL. XSL templates (XSLT) can be used to 
convert XML documents to a native format using the actions defined for
XSL.


Section 2 - TMX Structure

 Now that we have a basic knowledge of XML documents, let's take a 
look at the basic structure of an TMX file.
 TMX is used to define, as generically as possible, a map that 
holds enough information as to be useful to the vast majority of game
engines. It accomplishes this by using a very small set of possible
tags to encapsulate all relevant data, and keeps attributes to a 
minimum. More engine-specific data is usually defined as <property> 
tags within a <properties> element.
 The root element of a TMX file is always <map>. This map element 
contains the definitions for all data, including layers, tilesets,
and objects. There can be only one <map> tag per TMX file. 
 Within the map element, the three distinct tags for map data are 
<tileset>, <layer>, and <objectgroup>.
